
@{
    ViewData["Title"] = "ForgetPassword";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://www.google.com/recaptcha/api.js" async defer></script>

<div class="row justify-content-center">
    <div id="app" class="col-xl-6 col-12">
        <section class="card">
            <h1 class="card-header h3 text-center">忘記密碼</h1>
            <div class="card-body">
                <p class="alert alert-info text-center"
                   :hidden="isProcessing || !submitted">請前往您的電子信箱確認</p>
                <form>
                    <div class="form-group">
                        <label for="email">電子信箱</label>
                        <input :class="['form-control', emailValidationClass]"
                               name="email"
                               id="emsil"
                               type="email"
                               v-model="email"
                               @@input="validateEmail"
                               required />
                        <div class="invalid-feedback">請輸入格式正確的電子信箱</div>
                    </div>
                    <div class="u-form-group">
                        <div class="g-recaptcha"
                             data-callback="getValidationResponse"
                             data-sitekey="@ViewData["reCAPTCHASiteKey"]"></div>
                    </div>
                    <div class="form-group text-center">
                        <button class="btn btn-primary btn-block"
                                :disabled="!isValidEmail || isProcessing || !recaptchatoken"
                                @@click="sendEmail">
                            {{isProcessing? '處理中' : '寄送重設密碼連結'}}
                        </button>
                    </div>
                </form>
            </div>
            <div class="card-footer text-center">
                <p><a asp-controller="User" asp-action="Authenticate">回到登入頁</a></p>
            </div>
        </section>
    </div>
</div>



<script>


    function getValidationResponse(response) {
        app.recaptchatoken = response;
        console.log(response);
    }
    

    let app = new Vue({
        el: "#app",
        data() {
            return {
                email: "",
                isProcessing: false,
                submitted: false,
                recaptchatoken: "",
                emailValidationClass: {
                    "is-valid": false,
                    "is-invalid": false
                }
            }
        },
        methods: {
            async sendEmail(e) {
                e.preventDefault();
                this.isProcessing = true;
                this.submitted = false;

                let data = new URLSearchParams({
                    "email": this.email,
                    "recaptchatoken": this.recaptchatoken
                });
                let response = await fetch("/api/user/sendresetlink", {
                    method: "POST",
                    body: data
                });

                if (!response.ok) {
                    console.log(response.statusText);
                }
                else {
                    let text = await response.text();
                    console.log(text);
                }

                this.isProcessing = false;
                this.submitted = true;
                this.recaptchatoken = "";
                grecaptcha.reset();
            },
            validateEmail() {
                if (this.isValidEmail) {
                this.emailValidationClass["is-invalid"] = false;
                    this.emailValidationClass["is-valid"] = true;
                    return;
                }

                this.emailValidationClass["is-invalid"] = true;
                    this.emailValidationClass["is-valid"] = false;
            }
        },
        computed: {
            isValidEmail() {
                let emailRule = /^\w+((-\w+)|(\.\w+))*\@@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z]+$/;
                return emailRule.test(this.email);
            }
        }
    });
</script>

